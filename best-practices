
A list of simple best practices.

- Fail loudly (but tersely), succeed quietly. (1)
- A usage statement is not an error message.  Usage spew is a real problem; don't contribute.
- A stack trace is not an error message; it is an embarrassment.
- Write errors to stderr.  Write output to stdout.  Write logs somewhere else.
- Don't use logs as metrics.
- Version everything, but do not hardcode version numbers in a file; derive them from a VCS.
- Rigidly enforce commit message formats from the first commit.
- Never deploy the tip of a branch; deploy a specific commit.
- Don't use "cool" names for projects. Call your auth service "auth-service", not "jezebel"
- Don't use the implementation as a basis for the name of a service. (2)
- Always include timezone in a timestamp representation.  (https://www.rfc-editor.org/rfc/rfc3339) (3)
- Keep your code narrow.  Restricting line widths to a reasonable value (eg, 78) allows more views.


git specific best practices:
- Put meta data for commits in a git trailer.
- Put only project specific items in .gitignore.  (4)

Slogans:
- Plan for failure, automate, test extensively.

Do not bend your workflow to satsify your tools; fix your tools to fit
your workflow.  For example, if someone tells you "Even though the syntax
does not require it, we leave double quotes here because some IDEs flags
it as a syntax error", tell them to stop using broken IDEs.


notes:
(1)
	When an error occurs, a process should write a simple, concise, accurate error
	message to stderr and terminate.  Error messages should *not* offer suggestions.
	eg: "The connection to the server localhost:8080 was refused - did you specify the right host or port?"
	A better error message would be simply: "localhost:8080: connection refused"
	The rest is line noise.  Perhaps include the name of the executable.  Maybe include the
	uid or human readable name of the process owner.  Maybe a timestamp.  But no suggestions, and certainly
	not a usage statement.

	An example of line noise:
	$ for i in *.c; do git ls-files --error-unmatch "$i" > /dev/null 2>&1 || echo "$i"; done
	You should not have to discard stderr here, or stdout.  `git ls-files`
	should output nothing, or just the name.  Instead it writes a slew of messages like:
		error: pathspec 'foo.c' did not match any file(s) known to git
		Did you forget to 'git add'?
	Because of the loop, this "useful suggestion" is just a major irritant that
	may obscure actual, useful error messages.
(2)
	Humans should not care about the underlying implementation.  If you name your
	message queue "kafka", then it will be extremely difficult to migrate to KubeMQ.
	This is the same rationale for avoiding '.sh' suffixes on your shell scripts.
(3)
	Never display or write "07:18".  Always write "07:18:00-06:00" or "13:18:00Z" or
	"07:18T-6".  I don't really care how you choose to convey timezone, but do it.
	Always.  Never tell the user "We are using your timezone"; be explicit and tell
	them what you think their timezone is.	When the user has their laptop's local time
	set to London but their configured address with your service is in New York and
	they are currently in Los Angeles, then phrases like "your timezone" are ambiguous.
	GMT-7 is non-ambiguous (or, at least it is much less ambiguous), and your user's are
	smart enough to know what it means.  If they are not, then you should educate them.
(4)
	Patterns to protect against user specific names
	(like files generated by an IDE, or patterns like *~, or OS-specific files like .DSLOCAL)  DO NOT
	belong in the project's .gitignore.  Put them in $HOME/config/git/ignore ($XDG_CONFIG_HOME/git/ignore)
