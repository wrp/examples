
A simple list of simple best practices.

*) Fail loudly (but tersely), succeed quietly.
   -) When an error occurs, a process should write a simple, concise, accurate error
      message to stderr and terminate.  Error messages should *not* offer suggestions.  eg:
      "The connection to the server localhost:8080 was refused - did you specify the right host or port?"
      is just annoying.  A better error message would be simply:
      "localhost:8080: connection refused"
      The rest is line noise.  Perhaps include the name of the executable.  Maybe include the
      uid or human readable name of the process owner.

      Examples of line noise:
      $ for i in *.c; do git ls-files --error-unmatch "$i" > /dev/null 2>&1 || echo "$i"; done
      You should not have to discard stderr here, or stdout.  `git ls-files` should output nothing, or just the name.  Instead
      it writes a slew of messages like:
	      error: pathspec 'foo.c' did not match any file(s) known to git
	      Did you forget to 'git add'?
*) A usage statement is not an error message.
*) A stack trace is not an error message; it is an embarassment.
*) Write errors to stderr.  Write output to stdout.  Write logs somewhere else.
*) Don't use logs as metrics.
*) Version everything!  Do not hardcode version numbers in a file; derive them from a VCS.
*) Rigidly enforce commit message formats from the first commit.
*) Don't use '.sh' suffixes on shell scripts.
*) Never deploy the tip of a branch; deploy a specific commit
*) Don't use "cool" names for projects. Call your auth service "auth-service", not "jezebel"

Slogans:
Plan for failure, automate, test extensively.
