#!/bin/bash

d1='{"a":"a1","b":"b1"}'
d2='{"b":"b2","c":"c2"}'
d3='{"c":"c3","d":"c3"}'
jq --slurp -S '.[0] * .[1]' <(echo "$d1") <(echo "$d2")
jq --slurp -S '.[1] * .[0] * .[2]' <(echo "$d1") <(echo "$d2") <(echo "$d3")
# --> { "a": "a1", "b": "b2", "c": "c2" }

jq -n --argfile a1 <(echo "$d1") --argfile a2 <(echo "$d2") '$a1 * $a2'
jq -n --slurpfile a1 <(echo "$d1") --slurpfile a2 <(echo "$d2") '$a1[0] * $a2[0]'
echo "$d1" "$d2" | jq -s add

# Merge component
echo '{"b":{"s1":"s2"}}' "$d2" | jq -s '.[0].b *= .[1] | .[0]'
# --> { "b": { "s1": "s2", "b": "b2", "c": "c2" } }

# Group by hostname
# see https://stackoverflow.com/questions/60080554/how-to-join-json-files-using-jq
cat << EOF |
[
  {
    "clusterName": "cluster1",
    "nodes": [
      {
        "hostname": "server1",
        "dse": "6.7.5"
      },
      {
        "hostname": "server2",
        "dse": "6.7.5"
      }
    ]
  }
]
[{
    "hostname": "server1",
    "memorysize": "47.01 GiB",
    "processorcount": 12
  },
  {
    "hostname": "server2",
    "memorysize": "47.01 GiB",
    "processorcount": 12
  }]
EOF
jq --slurp '{
	clusterName: .[0][].clusterName,
	nodes: [[.[1][]], .[0][0].nodes] | add | group_by(.hostname) | map(add)
}'
# This is cleaner if the data is in a file:

#<file1.txt jq --slurpfile f file2.txt '{
#       clusterName:.[].clusterName,
#       nodes:map($f[], .nodes)|add|group_by(.hostname)|map(add)
#  }'
# Need to figure out how to translate the above into a map, noting that:
#  map(x) is equivalent to [.[] | x].
