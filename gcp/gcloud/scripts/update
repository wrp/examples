#!/bin/sh

# Naive script to record changes in gcp.  Directory structure should be like:
# project-name/
# |-- address/
# |-- big-query/
# |-- dataflow/
# |-- firewall-rule/
# |-- forwarding-rule/
# |-- image/
# |-- instance/
# |-- keys
# |-- metadata/
# |-- network/
# |-- service-account/
# |-- sql-instance/
# |-- target-pool/
# `-- sshKeys


. $(dirname $0)/funcs.sh
: ${base_dir=$(pwd)}

: ${FORCE="update gcp data on $(date)"}

get_column() {
	awk '$1 == host{print $n}' n="$2" host="$host" "${1%/*}/list"  |
	grep .
}

set_group_and_type() {
	orig_type="$(basename $(dirname "$1"))"
	type="$orig_type"s
	case $orig_type in
	service-account) group=iam;;
	metadata) group=metadata;;
	big-query) group=bq;;
	dataflow) group=dataflow; type=jobs;;
	cluster) group=container;;
	address)
		group=compute
		type=addresses
		region=$(test $host = list || get_column "$1" 4) \
			|| die "Can't get region for ${orig_type} $host"
		;;
	forwarding-rule|target-pool)
		group=compute
		region=$(test $host = list || get_column "$1" 2) \
			|| die "Can't get region for ${orig_type} $host"
		;;
	firewall-rule) group=compute ;;
	route) group=compute;;
	sql-instance)
		type=instances
		group=sql
		;;
	*)
		group=compute
		if test "$host" != list; then
			zone=$(get_column "$1" 2) \
			|| die "Can't get zone for ${orig_type} $host"
		fi
		;;
	esac
}


all_hosts() {
	# Update the description of each host listed in $1/list
	: ${FORCE=Auto update of all hosts in $1}
	export FORCE
	test -s $1/list || { echo "No entries in $1/list" >&2; return 1; }

	count=$(( $(wc -l < $1/list) - 1 ))

	trap 'tput ve' RETURN

	tput vi #  make cursor invisible
	el=$(tput el)
	while read host _; do
		if test -z "$host" || test "$host" = NAME; then
			continue
		fi
		printf "\r(%d/%d) update $host$el" "$((++i))" "$count"
		$0 $1/$host || return 1
	done < $1/list
	echo
}

execute() {
	echo "$@" >&2
	echo "$@"
	echo
	eval "$@"
	command_status=$?
	return $command_status
}

main() {
	trap 'rm -f $TMPFILE $TMPFILE2' return
	local TMPFILE=$(mktemp)
	local TMPFILE2=$(mktemp)

	if test "$1" = all-lists; then
		test -z "$2" && die "commit message required (arg 2)"
		find "$base_dir" -name list \
		| while read f; do FORCE="$2" "$0" $f; done
		exit
	fi

	# Each argument should be a path.  eg $project/$type/[$instance]
	# If the target of the path is a dir, update 'list' inside that dir
	# and then all of the machines
	unset do_all
	for x; do
		touch "$x"
		x=$(realpath $x)
		test -d "$x" && { do_all=1; x="$x"/list; }

		PROJECT=$(basename $(dirname $(dirname "$x")))
		host=$(basename $x)
		if test "$host" != list && test -d "$x" && ! test -f "$(dirname "$x")"/list; then
			$0 "$x"/list
		fi
		set_group_and_type $x
		case $group in
		metadata)
			case $host in
			list) echo 'This file intentionally left blank';;
			project-info)
				execute gcloud compute project-info describe \
					--project=$PROJECT
			;;
			iam-policy)
				execute gcloud projects --format=json get-iam-policy $PROJECT
			;;
			esac
		;;
		bq)
			case $host in
			list) execute bq ls --max_results 100000 --project_id=$PROJECT ;;
			*)
				test "$host" = "${host#*.}" \
				&& execute bq ls --max_results 100000 --project_id=$PROJECT $host
				execute bq show --max_rows_per_request 100000 --project_id=$PROJECT $host
				execute bq show --format=prettyjson --max_rows_per_request 100000 --project_id=$PROJECT $host
			;;
			esac
		;;
		*)
			case $host in
			list)
				# Fix host name width to 60 to try to minimize churn when gcloud
				# changes all the widths for reformat
				execute gcloud $group $type list --project=${PROJECT?}  > $TMPFILE2
				if test "$type" != service-accounts; then
					read line; echo "$line"
					while read host n; do printf "%-60s%s\n" "$host" "$n"; done
				else
					cat
				fi < $TMPFILE2
			;;
			*)
				execute gcloud $group $type describe \
					${zone:+--zone="$zone"} \
					${region:+--region="$region"} \
					--project=${PROJECT?} \
					--format=json \
					$host \
			;;
			esac
		;;
		esac \
		> $TMPFILE
		if test "$command_status" = 0 && test -s $TMPFILE; then
			sed -E -e 's/[[:space:]]*$//'  "$TMPFILE" > "$x"
		fi
		if ! test -s "$x"; then rm "$x"; else (
			cd "$base_dir"
			git add $x
			interactive_commit "$(printf \
				"Update $PROJECT:$orig_type/$host$(
					test "$PROJECT" != gcloud && echo " in $PROJECT"
					)\n\n%s" \
					"${FORCE}"
				)"
			)
		fi
		test -n "$do_all" && all_hosts $(dirname $x)
	done
	return 0
}
if test -z "$FORCE" && ! ( cd "$base_dir"; git diff-index --exit-code HEAD --); then
	die repo is dirty
fi

while getopts ":v" opt; do
	case $opt in
	v) set -x ;;
	*) die "illegal option -$OPTARG (-h for usage)";;
	esac
done
shift $(($OPTIND-1))

main "$@"
