kubectl controls the Kubernetes cluster manager.

# PODS
kubectl cp pod:/p/a/t/h /p/a/t/h                    # Copy a file from a pod to local
kubectl get pods ${selector+-l ${selector}}         # list pods
kubectl get pods -o json ${selector+-l ${selector}} # list pods in json format
kubectl describe pod ${name?} | grep Node:          # Determine node on which a pod is running


# list all the containers in a pod  https://kubernetes.io/docs/reference/kubectl/jsonpath/
kubectl get pod ${pod?} -o jsonpath='{.spec.containers[*].name}' ; echo

# Show the images used for each container in a pod   # https://golang.org/pkg/text/template/
kubectl get pods -o go-template --template='{{range .spec.containers}}{{.image}} {{end}}' ${pod?}; echo

# EVENTS
$ kubectl get events  # Show all events
kubectl get event --namespace ${namespace?} $( : # Get events for one specific object
	) --field-selector involvedObject.name=${object?}

kubectl get event --namespace ${namespace?} $( : # Get events for one specific pod
	) --field-selector involvedObject.name=${pod#pod/},involvedObject.kind=Pod

# DEPLOYMENTS
kubectl scale deployment ${deployment?} --replicas=${n-3} # Set the number of pods
kubectl rollout restart deployment ${deployment}  # Rolling restart
kubectl rollout status deployment ${deployment}   # Show status of rollout

# CONFIGS  k8s configs reside in $HOME/.kube
kubectl config current-context # Get the current context
kubectl config view            # See the available contexts

# NAMESPACES
kubectl get namespaces
kubectl get pods --namespace "${namespace}"
kubectl get pods -A  # get pods from all namespaces

# NODES
kubectl cordon $NODENAME  # Mark a node unschduleable (untested)
kubectl patch node $NODENAME -p '{"spec":{"unschedulable":true}}'  # edit a node (untested)

kubectl get pods --all-namespaces  $( : Show which pods are running on a node
	) -o jsonpath="{range .items[?(.spec.nodeName==\"${NODENAME?}\")]}{.metadata.name} {end}"

# NETWORK
# https://cloud.google.com/kubernetes-engine/docs/tutorials/http-balancer
kubectl run nginx --image=nginx --port=80   # Run a deployment
kubectl expose deployment nginx --target-port=80 --type=NodePort  # Create a service
kubectl apply -f basic-ingress.yaml   # Create an ingress

# Misc handy functions
# List all pods in all clusters
pods () {
	local cluster location
        gcloud container clusters list | awk 'NR > 1{print $1, $2}' | while read cluster location; do
                gcloud container clusters get-credentials $cluster --region $location;
                kubectl get pods > ${cluster}-pods;
        done
}

 Find more information at: https://kubernetes.io/docs/reference/kubectl/overview/

Basic Commands
  create        Create a resource from a file or from stdin.
  delete        Delete resources by filenames, stdin, resources and names, or by resources and label selector
  edit          Edit a resource on the server
  explain       Documentation of resources
  expose        Take a replication controller, service, deployment or pod and expose it as a new Kubernetes Service
  get           Display one or many resources
  run           Run a particular image on the cluster
  set           Set specific features on objects

Deploy Commands:
  rollout       Manage the rollout of a resource
  scale         Set a new size for a Deployment, ReplicaSet or Replication Controller
  autoscale     Auto-scale a Deployment, ReplicaSet, StatefulSet, or ReplicationController

Cluster Management Commands:
  certificate   Modify certificate resources.
  cluster-info  Display cluster info
  cordon        Mark node as unschedulable
  drain         Drain node in preparation for maintenance
  taint         Update the taints on one or more nodes
  top           Display Resource (CPU/Memory) usage.
  uncordon      Mark node as schedulable

Troubleshooting and Debugging Commands:
  describe      Show details of a specific resource or group of resources
  logs          Print the logs for a container in a pod
  attach        Attach to a running container
  exec          Execute a command in a container
  port-forward  Forward one or more local ports to a pod
  proxy         Run a proxy to the Kubernetes API server
  cp            Copy files and directories to and from containers.
  auth          Inspect authorization
  debug         Create debugging sessions for troubleshooting workloads and nodes

Misc Commands:
  apply         Apply a configuration to a resource by filename or stdin
  diff          Diff live version against would-be applied version
  kustomize     Build a kustomization target from a directory or URL.
  patch         Update field(s) of a resource
  replace       Replace a resource by filename or stdin
  wait          Experimental: Wait for a specific condition on one or many resources.

Settings Commands:
  label         Update the labels on a resource
  annotate      Update the annotations on a resource
  completion    Output shell completion code for the specified shell (bash or zsh)

Other Commands:
  api-resources Print the supported API resources on the server
  api-versions  Print the supported API versions on the server, in the form of "group/version"
  config        Modify kubeconfig files
  plugin        Provides utilities for interacting with plugins.
  version       Print the client and server version information

Usage:
  kubectl [flags] [options]

Use "kubectl <command> --help" for more information about a given command.
Use "kubectl options" for a list of global command-line options (applies to all commands).
