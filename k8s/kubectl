
# General overhead commands
gcloud auth login
gcloud components install kubectl

# To set up a cluster:
gcloud container clusters create test-cluster

# Create a deployment
kubectl run ${deployment_name-test_deployment} \
	--image us.gcr.io/${project?}/${image?} \
	--replicas $N
# Or, for more control:
kubectl create -f ${yaml_file}.yaml --record

# Create a service to make the deployment available
kubectl expose deployment test-airflow --type LoadBalancer

# Get info about what's running
kubectl get pods
kubectl get services
kubectl get deployments
kubectl cluster-info
gcloud container clusters list

kubectl get pods -o json \
	| jq '.items[].spec.containers[].ports' # ports in all pods

# Attach to a pod
kubectl exec -it $NAME bash  # NAME is first column of output of 'get pods'

# Logging
kubectl logs $NAME bash      # NAME is first column of output of 'get pods'

# Update the deployment (eg, rolling-update)
kubectl edit deployment/${deployment}
	# Edit the change and quit the editor.  Rollout begins
# For declarative:
kubectl replace -f ${yaml_file}.yaml

# After using edit to deploy, the change-cause will be None,
# so the output of:
kubectl rollout history deployment/${deployment}
# is not very helpful.  Try:
kubectl annotate deployment/${deployment} kubernetes.io/change-cause='test string'
# to annotate the update.  Or, update with:
kubectl set image deployment/${deployment} $container=$fqimagename:$version
	(container is from kubectl describe pod $pod)

# Show ips for a service:
kubectl get svc ${service?}

# Cleanup
kubectl delete deployment ${deployment_name}
gcloud container clusters delete test-cluster
