#!/bin/sh

# test calc.c
exe=./calc

pi=3.14159265358

main() {
	initialize

	test_factoring
	basic_tests
	simple_arithmetic
	test_string_registers
	test_funcs
	test_input_base
	test_long_string
	test_memory
	test_format

	summarize_results
}

test_factoring(){
	test_string '4 \factor nn' '2;2'
	test_string '7 \factor n' '7'
	test_string '24 \factor nnnn' '3;2;2;2'
}

test_format(){
	test_string '10# [6] 0F 1024p' '  1024'
	test_string '10# [.6] 0F 1024p' '001024'
	if test -n "$c"; then
		expect="01,024"
	else
		expect="001024"
	fi
	test_string "10# [.6'] 0F 1024p" "$expect"
}

test_input_base() {
	test_string '5#15' "Garbled Input (input base is 5): Discarded '15'"
	test_string '5#14p' '9'
	test_string '5#14p 20#p 14p' '9;9;14'
	test_string '36# 2z5 a# p' "3${c}857"
	test_string '36# 2z5 a# 25 nn' "25;3${c}857"
	test_string '11# a n' '10'
	test_string '23# m n' '22'
	test_string '24# n a#n' '23'
	test_string '24# n n Y' '  0: 23;  1: 23'
	test_string '36# Z a# p' '35'
	test_string '36# X a# p' '33'
	test_string '36#[f] X p# p g# 0x p' '33;15'
	test_string '36#[11] X g# 0x p a# 0x p' '17;11'
}
test_memory() {
	test_string '3 2 + M' "  0: 2;  1: 3"
	test_string '6 7 8 9 +++ 1mp' 8
	test_string '6 7 8 9 10 11\sum 0mp5mp' '11;6'
	test_string '1 2 3 + 1m + M' '  0: 3;  1: 2;  2: 1;  3: 5'
}

test_long_string(){
	for op in + -; do
		s=
		for((i=0; i <256; i++)); do
			s="${s}${op}2"
		done
		test_string "[${op}.3g]0F ${s} \sum n" "${op}512"
	done
}

basic_tests() {
	test_string 'p' "$err"
	test_string "1 $(yes 24 | sed -e 300q | tr -d \\n)
		3+p" "Overflow: Term ignored;4"
	test_string 'hq'
}

simple_arithmetic() {
	test_string '1 1+p' '2'
	test_string '3 (+1) (+1) +p' 2 # 1 + 1
	test_string '3 +1 +1 +p' 2     # 1 + 1
	test_string '3 (+1) + 1 +p' 5  # 3 + 1 + 1
	test_string '3 1 -(-5) -p' '7'   # 3 - 1 - (-5)
	test_string '3 1 - -5 -p' '7'   # 3 - 1 - (-5)
	test_string '4(+3)(-1)(+4) 3 1 -(-5) -nnn' "7;4;-1"
	test_string '4 +3  -1  +4  3 1 -(-5) -nnn' "7;4;-1"
	test_string '4,123(+393)(-123)(+4) 3 1 -(-5) -nrn +p' "7;-123;397"
	test_string '(3e+2)p' '300'
	test_string '10 3 1- (-5) -+p' '17'
	test_string '10 3 1-(-5) -+p' '17'  # 3 - 1 - (-5) + 10
	test_string '10 3 1-(-5) - + p' '17'
	test_string '4.5 1 1+Y' "  0: 4.5;  1: 2"
	test_string '5 6*p' '30'
	test_string '5 4 6C*p' '20'
	test_string '5 6*p' '30'
	test_string '5 (+6)*p' 30
	test_string '5 (-6)*p' -30
	test_string '7 (-3)+p' '4'
	test_string '(5e-1) 30*p' 15
	test_string '7    2/p' '3.5'
	test_string '1 2 *(-7)+p ' '-5'
	test_string '3.1 1.3+p' '4.4'
	test_string '2 5^pq' '32'
	test_string '2z5 ' "Garbled Input: Discarded '2z5'"
	test_string '10k10 3/p' '3.3333333333'
	test_string '1y+p' '2'
	test_string '1 2 3np' "3;2"
	test_string '2 4r/p' '2'
	test_string '4 1(-8)Y' "  0: 4;  1: 1;  2: -8"
	test_string '4 1- 8Y' "  0: 3;  1: 8"
	test_string "[.3'f]0F1024 1+p" "1${c}025.000"
	test_string "[.0'f]0F 1234567 p" "1${c}234${c}567"
}

test_string_registers() {
	test_string '[2 2+p][1 1+p]1x0x' "2;4"
	test_string '5[2 2+n]1[1 1+n]x0xp' "2;4;5"
	test_string '[garbage][2 2+n]5[1 1+n]2x1xn' "2;4;5"
	test_string '[f_oo][bar]Z' "(0): f_oo;(1): bar"
	test_string '[foo][bar]RZ' "(0): bar;(1): foo"
	test_string 'D[foo][bar][baz]DZ' "$err;(0): foo;(1): bar"
	test_string '[foo]ZRZ' "$err;(0): foo"
	long='this string needs to be at least 32 characters long'
	test_string "[$long][bar]Z" "(0): ${long};(1): bar"
	test_string '[a][b][3p][c][d][1 1+p]-1x2x' "2;3"
	test_string '[a][b][3p][c][d][1 1+p]x2x' "Stack empty;2;3"
	test_string '[abcdefghijklmnopqrskjkjkjjjkjkjjkjjkj]' ''
	test_string '[]9x' 'Register 9 empty'
	test_string 'x' "$err"
	test_string '1024p[.3g]0Fp' "1${c}024;1.02e+03"
	test_string '1_024p[.3g]0Fp' "1${c}024;1.02e+03"
	long_string="1 $( yes "1+" | sed 1049q )"
	test_string "[$long_string]0x[.0f]1Fp" '1050'
	test_string "[${long_string} 1+]0x[.0f]1Fp" '1051'
	test_string '1 4eXe2 3-p' "Garbled Input: Discarded '4eXe2';-2"
	test_string "4-" 'Stack empty'
	test_string "4(-2)" ''
	test_string "4(-2)+p" '2'
	test_string "4 3.5-p" '0.5'
	test_string "4 (2e-1)-p" '3.8'
	test_string '5(-1)(-2)(-3)(-4)nnn+p' "-4;-3;-2;4"
	test_string '1 2(-5) 9+p' '4'  # 9 - 5
	test_string '1 2 -5 9+p' '4'
	test_string "4 (2e-1) -p" '3.8'
	test_string "[a]5[b]p" 5
	test_string '4[1 1+]0xnn' "2;4"
	test_string '4[1 1+]3[2 2+]0xnnn' "2;3;4"
	test_string '4[1 1+]3[2 5*]1xnnn' "10;3;4"
	test_string '0Xap' 10
	test_string '0XaP2p' 40
	test_string '3.45 [.0f]0Fp' 3
	test_string '0Xfp' 15
	test_string '0XfP1p' 30
	test_string '0XfP1p' 30
	LC_NUMERIC=en_US.UTF-8 test_string '0k1456798p' '1,456,798'
	LC_NUMERIC=C test_string '-1k2456798p' '2456798'
	LC_ALL=en_US.UTF-8 test_string '0k3456798p' '3,456,798'
	LC_ALL=C test_string '0k4456798p' '4456798'

	test_string '4[1 1+]1.2x+p' 3.2  # Execute 1;1+;1.2+
	test_string '[04.0f]0F23p' '0023'

	# Grow the stack
	s=$(yes 1 | sed -e 128q | tr \\n ' ')
	test_string "$s"
	e='Stack empty'
	test_string '**' "$e;$e"
}

test_funcs() {
	test_string "$pi 6 /[sin]0!p" '0.5'
	test_string "$pi 6 /\sin p" '0.5'
	test_string "2 6 $pi 6 /\sin n+n" "0.5;8"
	test_string "$pi 6 /[sin]!p" '0.5'
	test_string "$pi 3 /[cos]0!p" '0.5'
	test_string "$pi 3 /[cos]!p" '0.5'
	test_string "[log2][foo] $pi 3 /[cos]!0!p" '-1'
	test_string '1 [acos]0!p' '0'
	test_string '0 [tan]0!p' '0'
	test_string '2.718281828459 [log]0!p' '1'
	test_string '1024 [log2]0!p' '10'
	test_string '1000 [log10]0!p' '3'
	test_string '1 2e-5 + [log1p] 0! p' '0.6931571805'
	test_string '100 [sqrt] 0! p' 10
	test_string '10 2 [pow] 0! p' 100

	test_string '-3.4 [fabs] !p' 3.4
	test_string '27 [cbrt]0!p' 3
	test_string '3 4 [hypot]0!p' 5
	test_string '5 6 [nextafter] 0! 4 0! p' 5

	test_string '5 [exp2] 0!p' 32
	test_string '2 [exp] 0!p' '7.389056099'

	test_string "[5.0'f]0F 2,123 23 +n" "2${c}146"

	test_string '1+2-3+4 5 +6 7 -8 9 10 \sum n' 33

	test_string '[banana] 0!' 'Unknown function: banana'
	test_string '?' "Output formats rational:.10'g  integer: 'd"
}


set_color() { if test -t 1; then tput setaf $1; fi; }

summarize_results() {
	printf '%s' "$count tests executed, "
	case $fail_count in
	0) set_color 2; echo all passed!!;;
	*) set_color 1; echo "$fail_count failed";;
	esac
	set_color 9
	test "$fail_count" = 0
}

check_comma_format() {
	# See  fa469334^:c/configure.ac, in which we used a configure
	# script to evaluate the platform.  For now, just do the
	# check at runtime.
	source_file=$(mktemp).c
	executable=$(mktemp)
	cat > "$source_file" <<- EOF
		#include <stdio.h>
		#include <string.h>
		#include <locale.h>
		int main(void) {
			char s[32];
			setlocale(LC_NUMERIC, "");
			sprintf(s, "%.3'Lf", (long double)1025);
			return strcmp(s, "1,025.000");
		}
		EOF
	${CC-cc} "$source_file" -o "$executable" 2> /dev/null
	have_comma_format=false
	if "$executable"; then
		c=,
		have_comma_format=true
	fi
	rm "$source_file" "$executable"
}


test_string() {
	local status=success
	input=$1
	expected=$(printf '%s' "$2" | tr ';' \\n)
	out=$(printf '%s\n' "$input" | $exe 2>&1)
	: $((count += 1))
	if test $# -gt 1 && test "$out" != "$expected"; then
		status=failed
	fi
	out=$($exe "$input" 2>&1)
	if test $# -gt 1 && test "$out" != "$expected"; then
		status=failed
	fi

	if test -n "$V" || test "$status" = failed; then
		printf '%3d: %s\n' "$count" \
			"$(printf '%s\n' "${input:0:40}" | tr \\n ';')"
		if test "$status" = failed; then
			printf '%s\n' " ^^ expected: '$expected'"
			printf '%s\n' "         got: '$out'"
			: $((fail_count++))
			if test -n "$X"; then
				exit 1
			fi
		fi
	fi
}

initialize() {
	check_comma_format
	RV=0
	count=0
	fail_count=0
	err='Stack empty'
}

main
