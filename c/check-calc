#!/bin/sh

# test calc.c


RV=0
test_string() {
	out=$(echo "$1" | ./calc 2>&1)
	if test "$out" != "$2"; then
		echo "On input:'$1', expected output '$2', got '$out'" >&2
		RV=1
	fi
	out=$( ./calc "$1" 2>&1) # allow word splitting (no quotes)
	if test "$out" != "$2"; then
		echo "With args:'$1', expected output '$2', got '$out'" >&2
		RV=1
	fi
}

nl='
'
test_string 'p' 'Stack empty (need 1 value)'
test_string '1 1+p' '2'
test_string '4.5 1 1+f' "  0: 4.5${nl}  1: 2"
test_string '5 6*p' '30'
test_string '7 3-p' '4'
test_string '7 3-p' '4'
test_string '7    2/p' '3.5'
test_string '1 2 *7 -p ' '-5'
test_string '3.1 1.3+p' '4.4'
test_string '2 5^pq' '32'
test_string '2y5' 'Garbled: 2y5'
test_string '10k10 3/p' '3.333333333'
test_string '1d+p' '2'
test_string '2 4r/p' '2'
test_string '[2 2+p][1 1+p]xax' "2${nl}4"
test_string '[foo][bar]l' "(a): foo${nl}(b): bar"
test_string '[a][b][3p][c][d][1 1+p]xcx' "2${nl}3"
test_string '[abcdefghijklmnopqrskjkjkjjjkjkjjkjjkj]' ''
test_string '[]tx' 'Invalid register'
test_string 'x' 'Invalid register'


# Grow the stack
s=$(yes 1 | sed -e 128q | tr \\n ' ')
test_string "$s"
e='Stack empty (need 2 values)'
test_string '**' "$e$nl$e"

exit $RV
