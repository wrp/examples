#!/bin/sh
# Set up smudge filter to do something like keyword expansion
# usage: $0 path-of-file-to-smudge [tag [filter-name]]
#
# If no tag is passed, will setup to smudge "%id%" (eg, the string %id%
# in the file will be replaced with the short hash of the current commit)

# smudge changes what is in the file in the working directory
# clean modifies the files as it is going into the repo

file=${1?}
tag=${2-%id%}
filter_name=${3-$(echo "$tag" | tr -dc '[:alnum:]\n')}

git_dir=$(git rev-parse --git-dir) || exit 1

printf "%s filter=${filter_name}\n" "${file?}" >> $(git rev-parse --show-toplevel)/.gitattributes
git config filter.${filter_name}.clean "git show HEAD:${file?}"
git config filter.${filter_name}.smudge "sed -e \"s/$tag/\$(git rev-parse --short HEAD)/g\""
if ! test -s "git_dir"/hooks/post-commit; then
	echo '#!/bin/sh' > "$git_dir"/hooks/post-commit
fi
echo "rm ${file?}; git checkout HEAD ${file?}" >> "$git_dir"/hooks/post-commit
chmod +x "$git_dir"/hooks/post-commit
