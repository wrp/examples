
# Show name of current branch
git rev-parse --abbrev-ref HEAD

# Move a branch to a new commit
git branch -f ${branch} ${new_tip_commit}  # reset branch
# or:
git update-ref refs/heads/${branch} ${new_value}   # NOTE: leading refs/heads

# Annotate a branch.  See https://stackoverflow.com/a/31441819/140750
git branch B A
git checkout B
git commit --allow-empty -m "Created branch 'B' from 'A'"

# Delete a remote branch locally
git branch -r -d ${remote:?}/${branch:?}
# Not to be confused with deleting the remote branch on the remote:
git push --delete ${remote?} ${branch?}
# Note that 'push --delete' will also delete the local tracking branch

# Show branch structure
git log --oneline --graph --decorate --all --simplify-by-decoration

# Archive a branch (prevent gc, but don't show it in git-branch)
git update-ref refs/archive/${branch} ${branch}
git branch -D ${branch}

git show-ref --heads  # List all branches (plumbing)

# Delete an arbitrary ref
git update-ref -d refs/${name}/${base}

get_branch() {
	# Get original branch name during a rebase
	branch=$(git branch --show-current)
	if test -z "$branch"; then
		# Maybe we are rebasing; try to get the original branch name
		for i in rebase-merge rebase-apply; do
			p=$(git rev-parse --git-path $i)
			if test -d "$p"; then
				branch=$(sed -e 's@refs/heads/@@' "$p"/head-name)
				break;
			fi
		done
	fi
}
