#!/usr/bin/env python

# Demonstrate __mul__, __rmul__ as underlying methods for *
from dataclasses import dataclass

class foo():
    def __init__(self, x=0):
        self.x = x

    def __mul__(self, other):
        return self.x * other.x

    # Called for other * self if other does not implement __mul__
    # or if other.__mul__(self) returns NotImplemented, or if
    # other.__mul__ is not implemented.
    def __rmul__(self, other):
        return other.x + self.x


@dataclass
class bar():
    x: float

@dataclass
class baz():
    x: float

    def __mul__(self, other):
        return NotImplemented  # Trigger delegation to other.__rmul__(self)

a = foo(3)
b = bar(5)
c = baz(7)

assert a*b == 3*5
assert b*a == 5+3

assert a*c == 3*7
assert c*a == 7+3  # delegates to a.__rmul__(c)
