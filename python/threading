#!/usr/bin/env python2.7

import threading
import sys
import time

lock = threading.RLock()
sem = threading.Semaphore(value=5)

class Foo(Exception): pass

def foo(name):

    try:
        sem.acquire()
        sys.stderr.write( '%s sem: %d\n' % (name, sem._Semaphore__value))
        raise Foo('%s:oops' % name)  # semaphore is not incremented
        sem.release()
    except Foo:
        if name == 'c':
            raise

    try:
        with lock:
            for x in range(5):
                print name, "running:", x
            raise Foo('%s:oops' % name)  # Lock is released
    except Foo:
        if name == 'c':
            raise

    if name == 'a':
        time.sleep(5)
        print 'a is done'

    if name == 'b':
        time.sleep(1)
        print 'b is done'

a = threading.Thread(target=foo, args=('a'))
b = threading.Thread(target=foo, args=('b'))
c = threading.Thread(target=foo, args=('c'))
d = threading.Thread(target=foo, args=('d'))

a.daemon = True

a.start()
b.start()
c.start()
# a.join() a is daemon, so is will be uncleanly terminated when program ends
# b.join() b is not daemon, so program will wait even though we don't join
c.join()
d.start()
d.join()
