#!/usr/bin/env python

import sys
import pandas as pd

a = pd.DataFrame(
    data = [ [1, 'foo', 3.3], [5, 'bar', 7.2] ],
    index = ['A', 'B'],  # Row index
    columns = ['count', 'name', 'value']  # column names
)
print(a)

a = pd.read_csv('./data')
print("dataframe of ./data'")
print("mean of height in ./data'")
print(a['height'].mean())
print("quantiles")
print(a['height'].quantile([.25,.5,.9]))

# filter columns, treating them as strings
# a.query('weight.str.contains("1")', engine = 'python')
q ='height < 5 and weight > 8'
print(q)
print(a.query(q))


a = pd.DataFrame(
    {
        "A": [1.0, 2.0, 3, 4],
        "B": ['foo', 'bar', 'baz', 'qux'],
        "C": pd.Series(1, index=list(range(4)), dtype="float32"),
        "D": list((1, 2, 3, 5))
    }
)

print(a)          # Print the entire data frame
b = a.drop(columns=['B', 'C'])  # Does not mutate a
print("After dropping B and C")
print(b)
last_row = a[-1:]   # create a new dataframe consisting of one row
b = a['A']          # create a new dataframe consisting of a single column

# create a dataframe in which the column matches an expression
greater = a['A'] > 2  # create a dataframe consisting of two columns: an integer index and true/false
g = a[greater]

# Select only two columns of the rows in which column A matches > 2
g = a.loc[greater, ['B', 'C']]


i = pd.DataFrame(  # Create dataframe indexed by integers
        [
            [1.0, 2.0, 3, 4],
            ['foo', 'bar', 'baz', 'qux'],
            pd.Series(1, index=list(range(4)), dtype="float32"),
            list((9, 2, 3, 5))
        ]
    )

z = i.iloc[[0,3],0]  # column 0 from rows 0 and 3
last = i.iloc[-1:]    # last row
first_col = i.iloc[:,0]
print('first col is:')
print(first_col)

# Get unique entries in a column
h = pd.DataFrame(
    {
        'foo': ['foo', 'bar', 'qux', 'foo'],
        'bar': [ 4, 2, 3, 1],
    }
)
print("original data frame:")
print(h)
print('uniqe values of foo:')
for t in h.foo.unique():
    print(t)
h = h.set_index('bar')
print("data frame: after set_index")
print(h)


# get mean of a grouped set
h = pd.DataFrame(
    {
        'v': [1, 2, 3, 4, 5, 6],
        'k': ['a', 'b', 'a', 'c', 'a', 'e'],
    }
)
print(h)
print('the mean of all values:')
print(h.groupby('k').mean())


h.corr()  # compute a correlation
h.cov()   # compute covariance
