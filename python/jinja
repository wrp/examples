#!/usr/bin/env python

import jinja2
import os
import sys

sample_input = '''
Simple substituion: {{ DB_USER }}
literal_bracket: {{ '{{' }}
raw: {% raw -%}
    This text is not {{ expanded }} at all!
    And, by virtue of the "-", all leading whitespace is removed.
{% endraw %}
"data": {
        "name": "example template",
        "comments": "demonstrate{#
                #} commenting out whitespace{#
                #}",
        "unset becomes blank": "{{kafka_truststore_password}}"
}
{% for i in alist %}
    item {{ i }}
{% endfor %}

join-sample: {{ names | join(',') }}
join-append-sample: {{ names | join(':' + (port | string) + ',') +
        ":" + (port|string)}}

custom filter example1: {{ names | myfilter(5) }}
custom filter example2: {{ names | myfilter(5) | filter2("foo") }}
'''

def main(pathlist=None):
    if pathlist:
        for path in pathlist:
            with open(path, 'r') as f:
                render_string(f.read())
    else:
        render_string(sample_input)

def filter(a, b):
    return 'a = {}, b = {}'.format(a,b)

def foo(*args):
    return args

def render_string(data):

    env = jinja2.Environment(trim_blocks=True)
    env.filters['myfilter'] = filter
    env.filters['filter2'] = foo
    template = env.from_string(data)
    render_data = template.render(
        title='title',
        alist=(1,2,3),
        port = 3764,
        names = [ 'name1', 'name2', 'name3' ],
        DB_USER=os.environ.get('USER')
    )
    print render_data


def die(msg):
    raise SystemExit("{}: {}".format(os.path.basename(sys.argv[0]), msg))


if __name__ == '__main__':
    try:
        main(sys.argv[1:])
    except jinja2.exceptions.TemplateAssertionError as e:
        die('jinja templating error: {}'.format(e.message))
