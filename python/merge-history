#!/usr/bin/env python

# naive script to merge sorted shell histories

import sys
import re

def merge_files(paths):
    files = [hist_file(path) for path in paths]

    while any(files):
        s = min(files)
        print(''.join(s.cmd.lines), end='')
        s.next()


class cmd():
    def __init__(self, ts, lines):
        self.ts = ts
        self.lines = lines

class NotSorted(Exception): pass


def ignore_command(lines):
    if len(lines) < 1:
        return False

    if lines[0] == 'g show\n':
        return True

    return False

class hist_file():
    def __init__(self, path=None):
        self.path = path if path else 'stdin'
        self.f = open(path, 'r') if path else sys.stdin
        self.next_line = self.f.readline()
        self.line_number = 1
        self.bof = re.compile('^#[0-9]{10}')
        self.cmd = None
        self.next()

    def __repr__(self):
        return f'{self.path}: {self.line_number}: {self.cmd.ts if self.cmd else "NONE"}'

    def __lt__(self, other):
        if other.cmd and self.cmd:
            return self.cmd.ts < other.cmd.ts
        if other.cmd:
            return False
        return True


    def __bool__(self):
        return bool(self.cmd)

    def next(self):
        """Put the next command from the file into self.cmd"""
        if not self.next_line:
            self.cmd = None
            return None

        ts = int(self.next_line[1:11])

        if self.cmd and ts < self.cmd.ts:
            raise(NotSorted(f'{self.path} is out of order at line {self.line_number}'))

        lines = [self.next_line]
        self.next_line = self.f.readline()
        self.line_number += 1
        while self.next_line and not self.bof.match(self.next_line):
            lines.append(self.next_line)
            self.next_line = self.f.readline()
            self.line_number += 1

        if ignore_command(lines[1:]):
            self.next()
            return

        self.cmd = cmd(ts, lines)

    def readlines(self):
        return self.f.readlines()

    def __enter__(self):
        return self

    def __exit__(self, *args):
        self.f.close()

def main():
    try:
        merge_files(sys.argv[1:])
    except NotSorted as e:
        raise SystemExit(e)

main()
