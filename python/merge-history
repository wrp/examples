#!/usr/bin/env python

# naive script to merge sorted shell histories

import os
import sys
import re


# Commands that are probably not interesting to keep in history
# TODO: add flags to allow user to specify categories to omit,
#       or patterns to ignore, or categories to keep, or ...?
#       For now, just honor HISTIGNORE as a pattern to ignore.
commands_to_ignore_re = [
    re.compile('^(g|git)\s+(ap|dc|diff|l1h||s|show|--version)(\s+[^|]*)$'),
    re.compile('^(cat|grep|ls|pwd|s|type|vi|which)(\s+[^|]*)$'),
]


def merge_files(paths):
    files = [hist_file(path, False) for path in paths]

    while any(files):
        s = min(files)
        print(s.cmd, end='')
        s.next()


class cmd():
    def __init__(self, ts, lines):
        self.ts = ts
        self.lines = lines

    def __str__(self):
        return ''.join(self.lines)

    def __lt__(self, other):
        return self.ts < other.ts

class NotSorted(Exception): pass


def ignore_command(lines):
    if len(lines) < 1:
        return False

    for pattern in commands_to_ignore_re:
        if pattern.match(lines[0]):
            return True

    return False

class hist_file():
    def __init__(self, path, allow_unsorted):
        self.allow_unsorted = allow_unsorted
        self.path = path if path != '-' else 'stdin'
        self.f = open(path, 'r') if path != '-' else sys.stdin
        self.next_line = self.f.readline()
        self.line_number = 1
        self.bof = re.compile('^#[0-9]{10}')
        self.cmd = None
        self.next()

    def __repr__(self):
        return f'{self.path}: {self.line_number}: {self.cmd.ts if self.cmd else "NONE"}'

    def __lt__(self, other):
        if self.cmd and other.cmd:
            return self.cmd < other.cmd
        if other.cmd:
            return False
        return True

    def __bool__(self):
        return bool(self.cmd)

    def readline(self):
        self.next_line = self.f.readline()
        self.line_number += 1
        return self.next_line and not self.bof.match(self.next_line)

    def check_order(self, ts):
        if not self.allow_unsorted and self.cmd and ts < self.cmd.ts:
            # OOOOK == out of order okay
            msg = f'{self.path} is out of order at line {self.line_number}'
            if os.environ.get('OOOOK', False):
                print(msg, file=sys.stderr)
            else:
                raise(NotSorted(msg))

    def next(self):
        """Put the next command from the file into self.cmd"""
        if not self.next_line:
            self.cmd = None
            return None

        ts = int(self.next_line[1:11])
        self.check_order(ts)

        lines = [self.next_line]
        while self.readline():
            lines.append(self.next_line)

        if ignore_command(lines[1:]):
            self.next()
        else:
            self.cmd = cmd(ts, lines)
        return self.cmd

    def readlines(self):
        return self.f.readlines()

    def __enter__(self):
        return self

    def __exit__(self, *args):
        self.f.close()


def sort_file(path):
    new_path = path + '.sorted'
    if os.path.exists(new_path):
        raise SystemExit(f'{new_path} already exists!  Aborting')

    h = hist_file(path, True)
    if h.cmd:
        cmds = [h.cmd]
    while h.next():
        cmds.append(h.cmd)

    cmds.sort()

    with open(new_path, 'w') as output:
        for x in cmds:
            print(x, end='', file=output)

def main():
    if pattern := os.environ.get('HISTIGNORE', None):
        commands_to_ignore_re.append(re.compile(pattern))

    try:
        if os.path.basename(sys.argv[0]).startswith('sort'):
            for x in sys.argv[1:]: sort_file(x)
        else:
            merge_files(sys.argv[1:])
    except IOError as e:
        raise SystemExit(f'{e.filename}: {e.strerror}')
#    except Exception as e:
#        raise SystemExit(e)

main()
