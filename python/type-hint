#!/usr/bin/env python

# keywords: annotation

# See: https://peps.python.org/pep-0484 and
# https://peps.python.org/pep-0649

# Verify the hints with 'mypy $path'

from __future__ import annotations  # Allow incomplete types

# explicit import of types seems unnecessary when using
# __future__.annotations, but mypy requires it
from typing import Dict, Iterable, Tuple, Optional


def f(x: int, y: Optional[Iterable[Tuple[int, str]]] = None) -> Optional[int]:
    if x > 0:
        return x
    else:
        return None

class Bar():
    def __init__(self: Bar, x: Optional[int] = None) -> None:
        self.x = x

def g(x: Dict[str, int]) -> int:
    return x.get('foo', 2)

a = Bar(f(1))
assert( 1 == g({'foo': 1}))
