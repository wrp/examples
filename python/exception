#!/usr/bin/env python

# Demonstrate basic syntax of some exception handling cases
import sys
import os
class foo(Exception): pass
class bar(Exception): pass

try:
    raise foo ("help")
except (foo, bar) as e:   # Use parens to group multiple exceptions
    print(f"Raised {e}, with cause {e.__cause__}")


def reraise():
    print('re raise a foo')
    try:
        raise foo("raised foo")
    except Exception as e:
        raise bar("reraised bar") from e
    finally:  # finally clause is executed whether an exception is thrown or not
        print('finally in re-raised foo')

# break in a finally discards an exception raised in an except clause
while True:
    try: a = int('foo')
    except ValueError as e: raise e
    finally: break

print('This is reached because break in finally discards the raise in except')
# See https://peps.python.org/pep-0601/

# KeyboardInterrupt is indistinuishable from receiving a SIGINT.  Perhaps there
# is some platform on which that is not true.

try:
    reraise()
except Exception as e:  # Does not catch SystemExit or KeyboardInterrupt
    assert(str(e) == 'reraised bar')
    assert(e.args[0] == 'reraised bar')
    assert(isinstance(e.__cause__, foo))
except BaseException as e:  # *Does* catch SystemExit and KeyboardInterrupt
    pass


def f(flag=False):
    try:
        print('try')
        if flag: raise foo('bar')
        return 5
    except:  # bare exception DO NOT EVER DO THIS
        print('except')
    finally:
        print('finally')
        # If there is an exception before return in try, then
        # the function returns None unless the finally clause returns a value.
        # If not, it returns 5 and executes the finally clause
        # and still returns 5, regardless of whehter or not the finally
        # clause returns.  Returning something from a finally clause is bad practice

rv = f()
print('f without exception returns:', rv)
rv = f(True)
print('f with exception returns:', rv)

try:
    print('try/finally with no except'),
finally:
    print('is ok')


# Demonstrate getting IO error messages
def open_file(path):
    try:
        f = open(path, 'r')
    except IOError as e:
        sys.stderr.write("{}: {}: {}\n".format(
            os.path.basename(sys.argv[0]), e.filename, e.strerror))

try: open_file('/non/extant-file')
except Exception: pass

# Last example, since this will abort.  Trigger a stacktrace
def func1(a):
    func2(a)
def func2(a):
    try:
        func3(a)
    except Exception as e:
        if hasattr(e, 'add_note'):  # Added in 3.11
            e.add_note(f"This note is added to the exception")
        raise e
def func3(a):
    raise foo('f1->f2->f3')

func1(3)

"""
List of builtin exceptions, culled from Doc/library/exceptions.rst


Built-in Exceptions
===================
.. exception:: BaseException
.. exception:: Exception
.. exception:: ArithmeticError
.. exception:: BufferError
.. exception:: LookupError

Concrete exceptions
-------------------
.. exception:: AssertionError
.. exception:: AttributeError
.. exception:: EOFError
.. exception:: FloatingPointError # Not currently used.
.. exception:: GeneratorExit
.. exception:: ImportError
.. exception:: ModuleNotFoundError
.. exception:: IndexError
.. exception:: KeyError
.. exception:: KeyboardInterrupt
.. exception:: MemoryError
.. exception:: NameError
.. exception:: NotImplementedError
.. exception:: OSError([arg])
.. exception:: OverflowError
.. exception:: PythonFinalizationError
.. exception:: RecursionError
.. exception:: ReferenceError
.. exception:: RuntimeError
.. exception:: StopIteration
.. exception:: StopAsyncIteration
.. exception:: SyntaxError(message, details)
.. exception:: IndentationError
.. exception:: TabError
.. exception:: SystemError
.. exception:: SystemExit
.. exception:: TypeError
.. exception:: UnboundLocalError
.. exception:: UnicodeError
.. exception:: UnicodeEncodeError
.. exception:: UnicodeDecodeError
.. exception:: UnicodeTranslateError
.. exception:: ValueError
.. exception:: ZeroDivisionError

The following exceptions are kept for compatibility with previous versions;
starting from Python 3.3, they are aliases of :exc:`OSError`.

.. exception:: EnvironmentError
.. exception:: IOError
.. exception:: WindowsError



OS exceptions
^^^^^^^^^^^^^

The following exceptions are subclasses of :exc:`OSError`, they get raised
depending on the system error code.

.. exception:: BlockingIOError
.. exception:: ChildProcessError
.. exception:: ConnectionError
.. exception:: BrokenPipeError
.. exception:: ConnectionAbortedError
.. exception:: ConnectionRefusedError
.. exception:: ConnectionResetError
.. exception:: FileExistsError
.. exception:: FileNotFoundError
.. exception:: InterruptedError
.. exception:: IsADirectoryError
.. exception:: NotADirectoryError
.. exception:: PermissionError
.. exception:: ProcessLookupError
.. exception:: TimeoutError
.. seealso:: :pep:`3151` - Reworking the OS and IO exception hierarchy

Warnings
--------
.. exception:: Warning
.. exception:: UserWarning
.. exception:: DeprecationWarning
.. exception:: PendingDeprecationWarning
.. exception:: SyntaxWarning
.. exception:: RuntimeWarning
.. exception:: FutureWarning
.. exception:: ImportWarning
.. exception:: UnicodeWarning
.. exception:: EncodingWarning
.. exception:: BytesWarning
.. exception:: ResourceWarning

Exception groups
----------------

The following are used when it is necessary to raise multiple unrelated
exceptions. They are part of the exception hierarchy so they can be
handled with :keyword:`except` like all other exceptions. In addition,
they are recognised by :keyword:`except*<except_star>`, which matches
their subgroups based on the types of the contained exceptions.

.. exception:: ExceptionGroup(msg, excs)
.. exception:: BaseExceptionGroup(msg, excs)

Exception hierarchy
-------------------

The class hierarchy for built-in exceptions is in Lib/test/exception_hierarchy.txt

BaseException
 ├── BaseExceptionGroup
 ├── GeneratorExit
 ├── KeyboardInterrupt
 ├── SystemExit
 └── Exception
      ├── ArithmeticError
      │    ├── FloatingPointError
      │    ├── OverflowError
      │    └── ZeroDivisionError
      ├── AssertionError
      ├── AttributeError
      ├── BufferError
      ├── EOFError
      ├── ExceptionGroup [BaseExceptionGroup]
      ├── ImportError
      │    └── ModuleNotFoundError
      ├── LookupError
      │    ├── IndexError
      │    └── KeyError
      ├── MemoryError
      ├── NameError
      │    └── UnboundLocalError
      ├── OSError
      │    ├── BlockingIOError
      │    ├── ChildProcessError
      │    ├── ConnectionError
      │    │    ├── BrokenPipeError
      │    │    ├── ConnectionAbortedError
      │    │    ├── ConnectionRefusedError
      │    │    └── ConnectionResetError
      │    ├── FileExistsError
      │    ├── FileNotFoundError
      │    ├── InterruptedError
      │    ├── IsADirectoryError
      │    ├── NotADirectoryError
      │    ├── PermissionError
      │    ├── ProcessLookupError
      │    └── TimeoutError
      ├── ReferenceError
      ├── RuntimeError
      │    ├── NotImplementedError
      │    ├── PythonFinalizationError
      │    └── RecursionError
      ├── StopAsyncIteration
      ├── StopIteration
      ├── SyntaxError
      │    └── IndentationError
      │         └── TabError
      ├── SystemError
      ├── TypeError
      ├── ValueError
      │    └── UnicodeError
      │         ├── UnicodeDecodeError
      │         ├── UnicodeEncodeError
      │         └── UnicodeTranslateError
      └── Warning
           ├── BytesWarning
           ├── DeprecationWarning
           ├── EncodingWarning
           ├── FutureWarning
           ├── ImportWarning
           ├── PendingDeprecationWarning
           ├── ResourceWarning
           ├── RuntimeWarning
           ├── SyntaxWarning
           ├── UnicodeWarning
           └── UserWarning
"""
