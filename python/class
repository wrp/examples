#!/usr/bin/env python3

import types


def initialize(x):
    print(f'initializing{x}')
    return x

class Foo:
    bar = initialize(5)  # Initialization of class attribute happens only once

def foo_meth(self: Foo):
    print(f'A do nothing method on {self}')

def foo_new(cls: Foo, *args, **kwargs):
        print(f'Foo.__new__ called with {args} {kwargs}')
        return super(Foo, cls).__new__(cls)

def foo_str(self: Foo) -> str:
        rv = f"x = {self.x}, bar = {self.bar}"
        if hasattr(self, "baz"):
            rv += f", baz = {self.baz}"
        return rv

Foo.__new__ = foo_new
Foo.__str__ = foo_str
Foo.meth = foo_meth

def n(self, x, **kwargs):
        self.x = x
        print(f'In init befor assign: {Foo.bar}  {self.bar}')
        self.bar += x
        print(f'In init after assign: {Foo.bar}  {self.bar}')
        self.map = {}
Foo.__init__ = n



print(f'Before creating A, Foo.bar = {Foo.bar}')
a = Foo(7)  # __init__  incrmements the instance variable bar

# After creating a, Foo.bar is NOT changed
print(f'After creating A, Foo.bar = {Foo.bar}')


print(a)  # Calling print invokes __str__ which  does not change anything

b = Foo(9, name='b')
print(b)
a.bar = 9
a.baz = 11
print(a)

z = b.meth.__self__
assert z is b


def frob(x, y=None):
    print(f'frobbing with x = "{x}" and y = "{y}"')
b.unbound = frob
# Quoting the docs:
# It is important to note that user-defined functions which are
# attributes of a class instance are not converted to bound methods;
# this only happens when the function is an attribute of the class.
b.unbound(3)  # No self argument is passed

Foo.meth2 = frob
b.meth2(3)  # self argument is pass, so y == 3
