#!/usr/bin/env python3

from Foo import Foo

import types


def n(self, x, **kwargs):
        self.x = x
        print(f'In init befor assign: {Foo.bar}  {self.bar}')
        self.bar += x
        print(f'In init after assign: {Foo.bar}  {self.bar}')
        self.map = {}
Foo.__init__ = n



print(f'Before creating A, Foo.bar = {Foo.bar}')
a = Foo(7)  # __init__  incrmements the instance variable bar

# After creating a, Foo.bar is NOT changed
print(f'After creating A, Foo.bar = {Foo.bar}')


print(a)  # Calling print invokes __str__ which  does not change anything

b = Foo(9, name='b')
print(b)
a.bar = 9
a.baz = 11
print(a)

z = b.meth.__self__
assert z is b


def frob(x, y=None):
    print(f'frobbing with x = "{x}" and y = "{y}"')
b.unbound = frob
# Quoting the docs:
# It is important to note that user-defined functions which are
# attributes of a class instance are not converted to bound methods;
# this only happens when the function is an attribute of the class.
b.unbound(3)  # No self argument is passed

Foo.meth2 = frob
b.meth2(3)  # self argument is pass, so y == 3
