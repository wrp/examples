#!/usr/bin/env python
# vim: noet

import concurrent.futures
from itertools import repeat
from dataclasses import dataclass
from threading import get_ident

@dataclass
class Bar:
	x: int

def foo(x: int, a: Bar, b: str):
	old = a.x
	a.x += x
	print(f'In thread {get_ident()}: ({x}, {b}): {old} -> {a.x}')


b = Bar(1)

with concurrent.futures.ThreadPoolExecutor() as executor:
	# Call foo 3 times, with arguments
	# 2, b, '2'
	# 7, b, '7'
	# 11, b, '11'
	executor.map(
		foo,
		[2, 7, 11],
		repeat(b),  # Each thread gets a reference to the same object
		['2', '7', '11'],
		timeout=None,  # timeout in seconds
		chunksize=1,
	)
	executor.shutdown(wait=True)

print(f'At end b has been incremented by each thread: b.x = {b.x}')
