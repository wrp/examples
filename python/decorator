#!/usr/bin/env python

def baz(i):
    return 'baz', i

class foo(object):
    def __init__(self, arg):
        self.arg=arg
        print(f'creating a foo with arg {arg}')

    def __call__(self, o):
        print(f'my arg is {self.arg}')
        print(f'my o is {o}')
        return baz

# Decorating bar with an argument causes a foo object to be instantiated
# (with 3 as argument to __init__) and called (with bar as an argument)
# The function returned by foo.__call__ is bound to bar
@foo(3)
def bar(arg):
    return 'Unseen string'

print('calling bar')
k = bar(9)
print(f'bar returned: {k}')
print(f'bar is {bar}')


def wr2(func):
    def rv(arg):
        print(f'in wr2s rv, arg = {arg}')
        return func(arg + 1)
    print(f'in wr2, func = {func}, rv = {rv}')
    return rv

def wr1(func):
    def rv(arg):
        print(f'in wr1s rv, arg {arg}')
        return func(arg + 2)
    print(f'in wr1, func = {func},  rv = {rv}')
    return rv

# Decorating sum causes wr1 to be called with sum as an argument.
# The function returned by wr1 is then passed as an argument to wr2
# and the function returned by wr2 becomes bound to sum
@wr2
@wr1
def sum(arg):
    print('in original sum, arg = {arg}')
    return arg + 3

print(sum(1))
