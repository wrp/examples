#!/usr/bin/env python

class cm:
    def __init__(self, name='default', suppress=False):
        self.name = name
        self.suppress = suppress

    def __enter__(self):
        print(f'__enter__ called for {self.name}')
        return self

    def __exit__(self, exception_type, exception_value, traceback):
        print(f'__exit__ called for {self.name} with args: ', end=None)
        if exception_type:
            print('***********************')
            print(f'exception type = {exception_type}')
            print(f'exception value = {exception_value}')
            print(f'exception traceback = {traceback}')
            print('***********************')
        # If __exit__ returns a truthy value, exceptions are not propagated
        return self.suppress


with cm('foo') as k:
    print(f'k name is {k.name}')

# ??? k is still valid (python 3.8.13)
print(f'type: {type(k)}')

with cm('BAD', True):
    # Raise an exception
    a = k.no_such_attribute
    print('Never called')
