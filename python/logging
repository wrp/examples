#!/usr/bin/env python

import logging
import os
import sys
from functools import wraps


def log_decorator(f):
    @wraps(f)
    def wrapper(*args, **kwargs):
        print(f"wrapped by decorator {args}: ", end='')
        return f(*args, **kwargs)
    return wrapper


class LogWrapper(logging.Logger):
    def __init__(self, name, level=logging.NOTSET):
        return super(LogWrapper, self).__init__(name, level)

    def info(self, msg, *args, **kwargs):
        print(f"log wrapper called with {msg}: ", end='')
        return super(LogWrapper, self).info(msg, *args, **kwargs)

logging.basicConfig(
    stream=sys.stdout,
    # level can be string or integer.  eg level=logging.INFO
    level=os.getenv('LOGLEVEL', 'INFO')
)

logger = logging.getLogger('default')
class Foo(Exception): pass

try:
    raise Foo('oops')
except:
    logger.debug('test debug')
    logger.info('test info')
    logging.info('test logging.info to logging')
    logger.warning('test warning')
    logger.error('test error')
    logger.fatal('test fatal', exc_info=1)  # Show the Foo
    logger.critical('test critical')


logging.setLoggerClass(LogWrapper)

logging.info('foo')  # Calls root logger, not wrapper
logging.info = log_decorator(logging.info)
logging.info('bar')  # Root logger with decorated info

logger = logging.getLogger('log')
logger.info('baz')  # Calls LogWrapper.info
logger.warning('qux')  # Calls unwrapped warning
