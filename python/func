#!/usr/bin/env python3

# / indicates end of postional args
# * indicates end of args that can be keyword or positional

def foo(a = 'default a', /, b = 'default b', *, c = ['default c']):
    print("a is a positional arg:", a)
    print("b can be a keyword or positional arg:", b)
    print("c is a keyword arg:", c)
    c.append(a)  # Modifies the default value for subsequent calls

foo(1)
foo(2, 5)
foo(3, b = 6)
a = ['foo']
print("a = ", a)
foo(4, c = a) # appends 4 to a
print("a = ", a)
foo(5)
try:
    foo(a = 5, b = 6, c = 7)
except Exception as e:
    print('caught', e)


def kwdict(a, foo=1, bar=2, **kwargs):
    print(f'a = {a}')
    print(f'foo = {foo}')
    print(f'bar = {bar}')
    print('baz = {}'.format(kwargs['baz']))

try:
    kwdict(5)
except Exception as e:
    print('baz not defined caught:', e)

a = {'a': 5, 'foo': 'foovalue', 'bar': 'bazvahlue'}
kwdict(baz='unp', **a)
a['baz'] = 'baz added'
kwdict(**a)

# If function definition does not contain / to indicate
# end of postional args, all args are keyword
def bar(a, b = 'def b'):
    print(f'bar: a = {a}, b = {b}')

bar(b = 5, a = 2)
bar(**{"b": 5, "a": 2})
bar(*[1,2])
