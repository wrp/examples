#!/usr/bin/env python

from collections.abc import Sequence, Iterable


# Example from https://docs.python.org/3.10/library/collections.abc.html#collections.abc.MutableMapping
class D:                                 # No inheritance
    def __init__(self): ...              # Extra method not required by the ABC
    def __getitem__(self, index):  ...   # Abstract method
    def __len__(self):  ...              # Abstract method
    def count(self, value): ...          # Mixin method
    def index(self, value): ...          # Mixin method

Sequence.register(D)                     # Register instead of inherit

print(f'D is a sequence: {issubclass(D, Sequence)}')
print(f'D() is an instance: {isinstance(D(), Sequence)}')

# For simple interfaces, you do not have to explicitly register
class E:
    def __iter__(self): ...
    def __next__(next): ...

issubclass(E, Iterable)
isinstance(E(), Iterable)
print(f'E is iterable: {issubclass(E, Iterable)}')
