#!/usr/bin/env python3


def foo(f, *args, **kwargs):
    print(f"in f, args = {args}")     # in f, args = (7, 8)
    print(f"in f, kwargs = {kwargs}") # in f, kwargs = {'c': 9, 'd': 10}
    f(5, *args, **kwargs)


def bar(a, b=3, *args, **kwargs):
    print(f"in bar, a = {a} of type {type(a)}, b = {b}, args = {args}, kwargs = {kwargs}")

def baz(a, b, c, d, **kwargs):
    print(f"in baz, a = {a}, b = {b}, c = {c}, d = {d}, kwargs = {kwargs}")


foo(bar, 7, 8, c=9, d=10) # args = (7, 8), kwargs = {'c': 9, 'd': 10}

vals = {'banana': 4, 'e': "e value", 'd': 4}
t = (2, 3)

print('Calling baz with *t and **vals')
baz(1, *t, **vals)  # * expands a tuple, ** expands a dict into keyword

bar(*vals)  # passes the keys of the dict as arguments
