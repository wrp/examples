#!/usr/bin/env python

import subprocess
import sys

# Send data to an invocation of cat.  cat's output is inherited
p = subprocess.Popen('cat', stdin=subprocess.PIPE)
out, err = p.communicate(input=bytes('this text is sent to the subprocess\n', 'utf-8'))
status = p.wait()
print(f'p status: {status}')
print(f'output streams were inherited so these are both none: {out}, {err}')

p = subprocess.Popen(['sh' ,'-c', 'echo stdout; echo stderr >&2'],
    stdout=subprocess.PIPE, stderr=subprocess.PIPE
)
out, err = p.communicate()

print('out =', out)
print('err =', err)

p = subprocess.Popen(['sh', '-c', 'echo stdout; echo stderr >&2'],
    stdout=subprocess.PIPE, stderr=subprocess.STDOUT  # Crap ass method of tying stderr to stdout
)
out, err = p.communicate()

print('***************')
print('out ="""', out, '"""')
print('err ="""', err, '"""')


subprocess.run(['printf', '%s', 'hello'])
subprocess.run('echo , world!', shell=True)
if subprocess.run(['ls', 'path/that/almost/certainly/does/not/exist']).returncode != 0:
    print('ls failed', file=sys.stderr)

a = subprocess.run('echo stdout; echo stderr >&2', shell= True, stdout=subprocess.PIPE,
    stderr=subprocess.DEVNULL)

# Attributes of a are:
# 'args', 'check_returncode', 'returncode', 'stderr', 'stdout'
# If using subprocess.PIPE, the data is a bytes object on the relevant member
print(dir(a))
print(a.args)
print(a.check_returncode())
print(a.returncode)
print(f'output: {a.stdout}')
print(f'error stream: {a.stderr}')
