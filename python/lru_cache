#!/usr/bin/env python

from functools import lru_cache


called_with = []

@lru_cache(maxsize=3, typed=False)
def foo(x):
    called_with.append(x)
    return {'val': x}

a = foo(3)
m = foo(4)
foo(5)
b = foo(3)  # Uses cache
assert(a is b)
assert(b['val'] == 3)
a['val'] = 'updated'
assert(b['val'] == 'updated')
foo(3)  # Uses cache
foo(1)  # Causes eviction of 4
foo(3)  # Uses cache
c = foo(4)  # calls foo again
assert(c is not m)

assert(called_with == [3,4,5,1,4])

info = foo.cache_info() # == CacheInfo(hits=3, misses=5, maxsize=3, currsize=3))
assert(info.hits == 3)
assert(info.misses == 5)
assert(info.maxsize == 3)
assert(info.currsize == 3)

foo.cache_clear()
info = foo.cache_info() # == CacheInfo(hits=0, misses=0, maxsize=3, currsize=0))
assert(info.hits == 0)
assert(info.misses == 0)
assert(info.maxsize == 3)
assert(info.currsize == 0)
