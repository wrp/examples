#!/usr/bin/env python

from collections import Counter
from types import MappingProxyType


class hashabledict(dict):
  def __key(self):
    return tuple((k,self[k]) for k in sorted(self))
  def __hash__(self):
    return hash(self.__key())
  def __eq__(self, other):
    return self.__key() == other.__key()


a = Counter(a=4, b=6)

def show_counter(c):
    for k in c.keys():
        if isinstance(k, dict):
            print(f'Type of k ({k}) is {type(k)}')
            d = dict(k)
            print(f'Type of d ({d}) is {type(d)}')
            for k, v in d.items():
                print(f'key: {k}: val: {v}')
    # v = [f'{x}->{c[x]}' for x in c]
    v = [f'{k}->{v}' for k, v in c.items()]
    print(', '.join(v))

show_counter(a)
a['a'] += 3
a['c'] += 8
key = {'test':'dict', 'as':'key'}
a[hashabledict(key)] += 1
a[hashabledict(key)] += 1
show_counter(a)

s = 'initialize from string counts each char'
b = Counter(s)
print(s)
show_counter(b)

show_counter(a + b)
