#!/bin/sh

# Use ' to force digit separators
printf "%'d\n" "1234567890"  # 1,234,567,890
	# [CX] [Option Start] Extension to the ISO C standard [Option End]
	# The functionality described is an extension to the ISO C standard.
	# Application developers may make use of an extension as it is supported
	# on all POSIX.1-2017-conforming systems.

# To repeat a string:
printf 'foo%.0s' a b c  # writes foofoofoo

# A field width or precision, or both, may be indicated by an
# asterisk `*' or an asterisk followed by one or more decimal
# digits and a `$' instead of a digit string.  In this case, an
# int argument supplies the field width or precision.  A negative
# field width is treated as a left adjustment flag followed by
# a positive field width; a negative precision is treated as
# though it were missing.  If a single format directive mixes
# positional (nn$) and non-posi- tional arguments, the results
# are undefined.

# Positional arguments are not available in the old bash builtin,
# so use /usr/bin/printf

for i in 5 15 20; do
	printf '%d:%*.*s:\n' $i $i $i "a string"  # Truncate
	printf '%d:%*s:\n' $i $i "a string"
	/usr/bin/printf '%1$d:%2$*1$s:\n' $i "a string"
done


# Shell escapes:
a=$(printf '%q' 'escape special characters: (){}\:')
echo a="$a"
echo a=$a
eval echo a=$a
