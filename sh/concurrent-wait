#!/bin/sh

# Normally, wait has some unfortunate behavior.  Namely:
# "If the wait utility is invoked with no operands, it shall wait
# until all process IDs known to the invoking shell have terminated
# and exit with a zero exit status". IMO, it should return zero only
# if all the waited for processes return 0.  This is an attempt
# to present the desired semantics.  That is, spawn several concurrent
# processes, wait for them, and know if any failed.

cmd() {
	test -n "$2" && sleep $2
	test $1 = 2
}

# Standard behavior
for i in 1 2 3; do cmd $i & done
wait
echo wait returned $?

# Use a tempfile and write to it on failure
trap 'rm -f $TMPFILE' 0
TMPFILE=$(mktemp)
for i in 1 2 3; do { cmd $i || echo fail > $TMPFILE; } & done
wait && ! test -s $TMPFILE
if test $? != 0; then echo detected failue; fi

# Attempt to parse jobs output.
for i in 1 2 3; do cmd $i 1& done
while read job; do echo $job; done << EOF
$(jobs -l | awk '{print $2}')
EOF
if test $? != 0; then echo detected failue; fi

