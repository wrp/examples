#!/usr/bin/env perl
# A random collection of symbols.
# printf '\xf0\x9f\x9b\x91 \U1f6d1'  # Shell printf

# Mapping from a code-point to a byte sequence is a bit
# convoluted.  The point code \U1f6d1 uses the template
# 11110xxx  10xxxxxx  10xxxxxx  10xxxxxx

# 1f6d1 == 0 0001 1111 0110 1101 0001, so we fill in the
# template to get:
# 11110xxx  10xxxxxx  10xxxxxx  10xxxxxx
#      ^^^    ^^^^^^    ^^^^^^    ^^^^^^
#      000    011111    011011    010001
# 11110000  10011111  10011011  10010001
# 0xf0      9f         9b        91
#

use 5.12.0;
use Unicode::UCD "charinfo";
use Data::Dumper;


my @samples = (
	'f09f9b91',  # A stop sign: üõë  \U1f6d1
	'e29c8b',    # A yellow hand  ‚úã
	'f09f8c80',  # Debian symbol üåÄ
	'f09f8cb9',  # A rose üåπ
	'e2888a',    # ‚àä
	'e28888',    # ‚àà
	'e280a6',    # ellipses ‚Ä¶
	'e2889e',    # ‚àû
	'c2b1',      # ¬±
	'cf80',      # œÄ
	'e28a86',    # ‚äÜ   Subset
	'e284a4',    # ‚Ñ§
	'e29ca8',    # ‚ú®
	'e29c85',    # ‚úÖ
);
printf "%s", pack "H*", $_ foreach @samples; print "\n";
# print Dumper(charinfo(0x1f6d1));

sub print_range {
	printf("%x .. %x: ", $_[0], $_[1]);
	foreach my $x ($_[0]..$_[1]) {
		my $s = sprintf('%x', $x);
		printf "%s", pack "H*", $s;
	}
	print "\n";
}

sub print_32 { print_range $_[0], $_[0] + 31; }
print_32 0xe0b880;
print_32 0xe0b8a0;
print_32 0xe0b980;
print_32 0xe28a80;  # Set relations
print_range 0xe58580, 0xe5859f;
print_range 0xe585a0, 0xe585bf;
print_range 0xe58a90, 0xe58aaf;
print_range 0xe58ab0, 0xe58abf;
print_range 0xe58c90, 0xe58caf; # Some Chinese characters
print_range 0xe58cb0, 0xe58ccf;
print_range 0xe59080, 0xe5909f;
print_range 0xe590a0, 0xe590bf;

print_range 0xe38190, 0xe381af;
print_range 0xe381b0, 0xe381bf;
print_range 0xe29c82, 0xe29c9f;
print_range 0xe29ca0, 0xe29cbf;

# use open ":std", ":encoding(UTF-8)";
binmode STDOUT, ':encoding(UTF-8)';

print "\\U1f6d1: " . chr(0x1f6d1) . "\n";

@samples = (
	[0x2589..0x25A0],  # Block elements
	[0x2B00..0x2B56],  # Miscellaneous symbols and arrows
	[9800..9811],      # Miscellaneous symbols
	[9812..9831],      #   chess/card symbols
	[9833..9839],      #   music
	[9855..9865],
	[9889..9899],
	[913..991],        # Greek an Coptic
);

my $block = "";
my $previous_block = "";

foreach my $range (@samples) {
	my $first = $$range[0];
	my $info = charinfo($first);
	# print Dumper($info);
	$block = $$info{block};
	say $block if $block ne $previous_block;
	$previous_block = $block;

	print chr($_) . (( ($_ % 16) == (($first - 1) % 16)) ? "\n" : "  ")
		foreach (@$range);
	print "\n";
}


# perl -MUnicode::UCD=charinfo -MData::Dumper -e 'print Dumper(charinfo(0x1f6d1))'
__DATA__

for i in ‡πÅ ‡∏Å‡πâ ‡πÑ ... ; do
	printf "$i\t";
	printf $i | xxd;
done | awk '{$2=""}1'
‡πÅ  e0b9 81 ...
‡∏Å‡πâ  e0b8 81e0 b989 ......
‡πÑ  e0b9 84 ...
‡∏Ç  e0b8 82 ...
‡πÄ  e0b9 80 ...
‡∏û‡∏¥‡πà  e0b8 9ee0 b8b4 e0b9 88 .........
‡∏°  e0b8 a1 ...
‡∏ü‡∏±  e0b8 9fe0 b8b1 ......
‡∏á  e0b8 87 ...
‡∏Å‡πå  e0b8 81e0 b98c ......
‡∏ä‡∏±  e0b8 8ae0 b8b1 ......
‡∏ô  e0b8 99 ...
‡πÉ  e0b9 83 ...
‡∏ä‡πâ  e0b8 8ae0 b989 ......
‡πÅ  e0b9 81 ...
‡∏ó  e0b8 97 ...
‡∏ô  e0b8 99 ...
‡∏ó‡∏µ‡πà  e0b8 97e0 b8b5 e0b9 88 .........
‡πÅ  e0b9 81 ...
‡∏•  e0b8 a5 ...
‡∏∞  e0b8 b0 ...
‡πÄ  e0b9 80 ...
‡∏û‡∏∑‡πà  e0b8 9ee0 b8b7 e0b9 88 .........
‡∏≠  e0b8 ad ...
‡∏ï  e0b8 95 ...
‡∏£  e0b8 a3 ...
‡∏ß  e0b8 a7 ...
‡∏à  e0b8 88 ...
‡∏ß‡πà  e0b8 a7e0 b988 ......
‡∏≤  e0b8 b2 ...
‡πÑ  e0b9 84 ...
‡∏°‡πà  e0b8 a1e0 b988 ......
‡∏ñ‡∏π  e0b8 96e0 b8b9 ......
‡∏Å  e0b8 81 ...
‡πÄ  e0b9 80 ...
‡∏£‡∏µ  e0b8 a3e0 b8b5 ......
‡∏¢  e0b8 a2 ...
‡∏Å  e0b8 81 ...

‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
‡∏ü‡∏¥‡∏Å‡∏ã‡πå‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß.
