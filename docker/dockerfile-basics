# An ARG may be set at build time with --build-arg name=value
FROM debian
ARG var1
ARG var2=default-value
# The scope of an ARG is from the line it is defined until the
# end of the build stage in which it was defined.

RUN mkdir -p path/rel/to/root
WORKDIR /path/rel/to/root
RUN echo $var1 from dockerfile > output
RUN echo $var2 from dockerfile >> output

WORKDIR ../../

RUN echo Another method for do$( \
        : )ing line continuations >> to/root/output

RUN echo Yet another me$( \
        printf th \
        )od for line continuations >> to/root/output
ENV var2=$var2

# CMD seems to be in a new build stage, or variables are not
# expanded by CMD as the '$var1' and '$var2' below
# are passed literally to the command and not expanded
CMD echo "workdir is $(pwd)" && echo var1=$var1, var2=$var2 && cat /path/rel/to/root/output

# line continuation character is \


# You can access files from the build context without copying them
# to the image using a bind mount.  eg
# RUN --mount=type=bind,source=examples.bundle,target=examples.bundle \
#        git fetch examples.bundle

# If an ENTRYPOINT is specified, then CMD will be passed as an argument
# to it.  (entrypoint can be overridden in a container with
# docker run --entrypoint...)

# If ENTRYPOINT is given, you should use the exec form
# ENTRYPOINT = ['cmd', 'arg', 'arg']
# instead of the shell form: ENTRYPOINT = cmd arg arg
# because in the former, 'cmd' will be pid 1 in the container
# but with the latter 'cmd' will be a child of an sh instance

# COPY vs ADD
# COPY only works with local files, while ADD can take URLS, unpacks
#   tarballs, etc.  Best practive is to prefer COPY for simplicity.
