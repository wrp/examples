#!/bin/sh

# Get recent unresolved incidents. If $1 is specified, limit search to that service,
# otherwise get incidents for $PD_SERVICE, or (if empty) all incidents (up to 1st 100).

# If $2 is given, it should be an ISO 8601 formatted time: only incidents
# after that time are included.  Default is one week ago.

# Full list of services can be found by GETting services/ from PD.
# eg:
# ./query services | jq -rc .servi'ces[] | [ .id, .name ] | @tsv'
# (Use ./list-all-services to account for pagination)

# If RESOLVED is set in the environment, also return resolved incidents

service=${1-$PD_SERVICE}

main() {
	parse_start_date "${2-$(date -v -1w -Iseconds)}"

	curl -fsS \
		-H 'Accept: application/vnd.pagerduty+json;version=2' \
		-H "Authorization: Token token=${PD_TOKEN:?}" \
		--data-urlencode limit=100 \
		-X GET \
		"https://api.pagerduty.com/incidents"$( :
		)"?since=$start_date"$( :
		)"&statuses[]=triggered"$( :
		)"&statuses[]=acknowledged"$( :
		)${RESOLVED:+"&statuses[]=resolved"}$( :
		)"&urgencies[]=high"$( :
		)"&sort_by=incident_number:DESC"$( :
		)"${service:+&service_ids[]=${service}}" \
	| jq -rc '.incidents[] | [.created_at, .incident_number, .status, .title] | @tsv' \
	| ${PAGER-more}
}

# If start date is not of the form "YYYY-MM-DDTHH:mm:ss-dd:dd", try
# to use it as an argument to date to generate a timestamp
parse_start_date() {
	start_date=${1}
	local d='[0-9]'

	case $start_date in
	$d$d$d$d-[01]$d-[0-3]${d}T[0-2]$d:[0-6]$d:[0-6]$d[+-]$d$d:$d$d) : ;;
	*) start_date=$(date -v -${start_date} -Iseconds);;
	esac
}

main "$@"
